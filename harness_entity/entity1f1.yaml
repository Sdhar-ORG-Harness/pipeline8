pipeline:
  tags: {}
  projectIdentifier: sd2
  orgIdentifier: default
  stages:
    - stage:
        name: java-onb-dev
        identifier: javaonbdev
        description: ""
        type: IDP
        spec:
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: GitClone
                  name: CloneCookieTemp
                  identifier: CloneCookieTemp
                  spec:
                    connectorRef: account.ShibamDhar
                    repoName: <+pipeline.variables.cookie_repo>
                    build:
                      type: branch
                      spec:
                        branch: main
                  description: Clone the Java cookiecutter template
                  when:
                    stageStatus: Success
              - step:
                  type: CookieCutter
                  name: CookieCuttercodeStart
                  identifier: CookieCuttercodeStart
                  spec:
                    templateType: private
                    pathForTemplate: <+pipeline.variables.cookie_repo>
                    cookieCutterVariables:
                      service_name: <+pipeline.variables.service_name>
                      java_package_name: <+pipeline.variables.java_package_name>
                      description: <+pipeline.variables.description>
                      owner: <+pipeline.variables.owner>
                    verbose: false
                    overwriteIfExists: false
                  when:
                    stageStatus: Success
              - step:
                  type: CreateRepo
                  name: CreateREPO
                  identifier: CreateREPO
                  spec:
                    connectorType: Github
                    connectorRef: account.ShibamDhar
                    organization: <+pipeline.variables.organization>
                    repository: <+pipeline.variables.repo_name>
                    repoType: public
                    defaultBranch: main
                    personalAccount: false
                  when:
                    stageStatus: Success
              - step:
                  type: DirectPush
                  name: DirectPushToGit
                  identifier: DirectPushToGit
                  spec:
                    connectorType: Github
                    forcePush: true
                    connectorRef: account.ShibamDhar
                    organization: <+pipeline.variables.organization>
                    repository: <+pipeline.variables.repo_name>
                    codeDirectory: <+pipeline.variables.service_name>
                    branch: main
                  when:
                    stageStatus: Success
              - step:
                  type: Run
                  name: create and register entity
                  identifier: create_and_register_entity
                  spec:
                    shell: Python
                    command: |-
                      import requests
                      import json

                      url = "https://qa.harness.io/v1/entities?convert=false&dry_run=false"

                      payload = json.dumps({
                        "yaml": "apiVersion: harness.io/v1\nkind: component\ntype: Service\nidentifier: <+pipeline.variables.unique_identifier>\nname: <+pipeline.variables.service_name>\nowner: <+pipeline.variables.owner>\nspec:\n  lifecycle: experimental\n  ownedBy:\n    - group/sample-group\nmetadata:\n  description: <+pipeline.variables.description>\n  annotations:\n    backstage.io/source-location: url:https://github.com/<+pipeline.variables.organization>/<+pipeline.variables.repo_name>/blob/main/gen-code.yaml\n    backstage.io/techdocs-ref: dir:.\n  links:\n    - title: Website\n      url: http://my-sample-website.com\n  tags:\n    - my-sample\n",
                        "git_details": {
                          "branch_name": "main",
                          "file_path": "harness_entity/<+pipeline.variables.service_name>.yaml",
                          "commit_message": "Added Harness Git Experience",
                          "connector_ref": "account.ShibamDhar",
                          "store_type": "REMOTE",
                          "repo_name": "<+pipeline.variables.repo_name>",
                          "is_harness_code_repo": False
                        }
                      })
                      headers = {
                        'Content-Type': 'application/json',
                        'Harness-Account': '<+pipeline.variables.harness_accID>',
                        'x-api-key': '<+pipeline.variables.api_key>'
                      }

                      response = requests.request("POST", url, headers=headers, data=payload)

                      print(response.text)
        tags: {}
  variables:
    - name: service_name
      type: String
      description: ""
      required: true
      value: <+input>
    - name: java_package_name
      type: String
      description: ""
      required: true
      value: <+input>
    - name: description
      type: String
      description: ""
      required: true
      value: <+input>
    - name: owner
      type: String
      description: ""
      required: true
      value: <+input>
    - name: cookie_repo
      type: String
      description: ""
      required: false
      value: java-cookiecutter-template
    - name: organization
      type: String
      description: ""
      required: true
      value: <+input>
    - name: repo_name
      type: String
      description: ""
      required: true
      value: <+input>
    - name: unique_identifier
      type: String
      description: ""
      required: true
      value: <+input>
    - name: harness_accID
      type: String
      description: ""
      required: true
      value: zEaak-FLS425IEO7OLzMUg
    - name: api_key
      type: String
      description: ""
      required: true
      value: pat.zEaak-FLS425IEO7OLzMUg.686cd454f3fdba532eeeec80.ZcBaZiKkUONjpsmxKGOY
  identifier: JavaOnboardSD_Clone_Clone
  name: java-service-onboarding
