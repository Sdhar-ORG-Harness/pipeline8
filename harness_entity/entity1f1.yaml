pipeline:
  tags: {}
  projectIdentifier: sd2
  orgIdentifier: default
  stages:
    - stage:
        name: java-onb-dev
        identifier: javaonbdev
        description: ""
        type: IDP
        spec:
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: GitClone
                  name: Cloning cookiecutter template
                  identifier: CloneCookieTemp
                  spec:
                    connectorRef: account.ShibamDhar
                    repoName: <+pipeline.variables.cookie_cutter_repo>
                    build:
                      type: branch
                      spec:
                        branch: master
                  description: Clone the Java cookiecutter template
                  when:
                    stageStatus: Success
              - step:
                  type: CookieCutter
                  name: Cookiecutter code generator
                  identifier: CookieCuttercodeStart
                  spec:
                    templateType: private
                    pathForTemplate: <+pipeline.variables.cookie_cutter_repo>
                    cookieCutterVariables:
                      project_name: <+pipeline.variables.project_name>
                      app_name: <+pipeline.variables.app_name>
                    verbose: false
                    overwriteIfExists: false
                  when:
                    stageStatus: Success
              - step:
                  type: CreateRepo
                  name: Create a Git repo
                  identifier: Create_a_Git_repo
                  spec:
                    connectorType: Github
                    connectorRef: account.ShibamDhar
                    organization: <+pipeline.variables.organization>
                    repository: <+pipeline.variables.repo_name>
                    repoType: public
                    defaultBranch: main
                    personalAccount: false
                  when:
                    stageStatus: Success
              - step:
                  type: DirectPush
                  name: Push code to Git
                  identifier: DirectPushToGit
                  spec:
                    connectorType: Github
                    forcePush: true
                    connectorRef: account.ShibamDhar
                    organization: <+pipeline.variables.organization>
                    repository: <+pipeline.variables.repo_name>
                    codeDirectory: <+pipeline.variables.project_name>
                    branch: main
                  when:
                    stageStatus: Success
              - step:
                  type: Run
                  name: create and register entity
                  identifier: create_and_register_entity
                  spec:
                    shell: Python
                    command: |-
                      import requests
                      import json

                      # Define Harness API endpoint with org and project identifiers
                      url = (
                          "https://qa.harness.io/v1/entities"
                          "?convert=false"
                          "&dry_run=false"
                          "&orgIdentifier=<+pipeline.variables.org_identifier>"
                          "&projectIdentifier=<+pipeline.variables.project_identifier>"
                      )

                      # Define the entity YAML
                      component_yaml = '''
                      apiVersion: harness.io/v1
                      kind: component
                      orgIdentifier: <+pipeline.variables.org_identifier>
                      projectIdentifier: <+pipeline.variables.project_identifier>
                      type: Service
                      identifier: <+pipeline.variables.unique_identifier>
                      name: <+pipeline.variables.app_name>
                      owner: <+pipeline.variables.owner>
                      spec:
                        lifecycle: experimental
                        ownedBy:
                          - group/sample-group
                      metadata:
                        description: This entity ids for <+pipeline.variables.project_name>
                        annotations:
                          backstage.io/source-location: url:https://github.com/<+pipeline.variables.organization>/<+pipeline.variables.repo_name>
                          backstage.io/techdocs-ref: dir:.
                        links:
                          - title: Website
                            url: http://my-sample-website.com
                        tags:
                          - my-sample
                      '''

                      # Construct the JSON payload
                      payload = json.dumps({
                          "yaml": component_yaml,
                          "git_details": {
                              "branch_name": "main",
                              "file_path": ".harness/<+pipeline.variables.app_name>.yaml",
                              "commit_message": "Created an entity file",
                              "connector_ref": "account.ShibamDhar",
                              "store_type": "REMOTE",
                              "repo_name": "<+pipeline.variables.repo_name>",
                              "is_harness_code_repo": False
                          }
                      })

                      # Define request headers
                      headers = {
                          "Content-Type": "application/json",
                          "Harness-Account": "<+pipeline.variables.harness_accID>",
                          "x-api-key": "<+pipeline.variables.api_key>"
                      }

                      # Send the request and handle response
                      try:
                          response = requests.post(url, headers=headers, data=payload)

                          if response.status_code >= 200 and response.status_code < 300:
                              print("Component registered successfully.")
                          elif response.status_code >= 400 and response.status_code < 500:
                              print(f"Client error ({response.status_code}): {response.json().get('message', response.text)}")
                          elif response.status_code >= 500:
                              print(f" Server error ({response.status_code}): {response.text}")
                          else:
                              print(f"Unexpected response ({response.status_code}): {response.text}")

                          obj = response.json()
                          catalog_url = (
                          f"https://qa.harness.io/ng/account/<+pipeline.variables.harness_accID>/module/idp/catalog/"
                          f"account.{obj.get('orgIdentifier')}.{obj.get('projectIdentifier')}/"
                          f"{obj.get('kind')}/{obj.get('identifier')}"
                          )
                          print(catalog_url)
                      except requests.exceptions.RequestException as e:
                          print(f" Request failed: {e}")
                    outputVariables:
                      - name: url
                        type: String
                        value: catalog_url
        tags: {}
  variables:
    - name: project_name
      type: String
      description: ""
      required: true
      value: <+input>
    - name: app_name
      type: String
      description: ""
      required: true
      value: <+input>
    - name: repo_name
      type: String
      description: ""
      required: true
      value: <+input>
    - name: organization
      type: String
      description: ""
      required: true
      value: <+input>
    - name: unique_identifier
      type: String
      description: ""
      required: true
      value: <+input>
    - name: owner
      type: String
      description: ""
      required: true
      value: <+input>
    - name: org_identifier
      type: String
      description: ""
      required: true
      value: <+input>
    - name: project_identifier
      type: String
      description: ""
      required: true
      value: <+input>
    - name: harness_accID
      type: String
      description: ""
      required: false
      value: zEaak-FLS425IEO7OLzMUg
    - name: cookie_cutter_repo
      type: String
      description: ""
      required: false
      value: cookiecutter-spring-boot
    - name: api_key
      type: Secret
      description: ""
      required: false
      value: sd-api-key-harness
  identifier: JavaOnboardSD_Clone_Clone
  name: java-service-onboarding-pipeline
